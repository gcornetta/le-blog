---
// src/components/content/ImageCarousel.astro
import slide1 from '../../assets/images/slides/slide-1.tiff';
import slide2 from '../../assets/images/slides/slide-2.tiff';
import slide3 from '../../assets/images/slides/slide-3.tiff';
import slide4 from '../../assets/images/slides/slide-4.tiff';

// Props
const autoplay = Astro.props.autoplay ?? true;
const interval = Astro.props.interval ?? 5000;
const showProgress = Astro.props.showProgress ?? true;

// Slide data array
const slides = [
  { src: slide1.src, title: 'First Slide', text: 'Description for the first slide.', link: '#' },
  { src: slide2.src, title: 'Second Slide', text: 'Description for the second slide.', link: '#' },
  { src: slide3.src, title: 'Third Slide', text: 'Description for the third slide.', link: '#' },
  { src: slide4.src, title: 'Fourth Slide', text: 'Description for the fourth slide.', link: '#' },
];

// Serialize options for Alpine
const options = JSON.stringify({ autoplay, interval, showProgress, slides });
---

<div
  x-data={`carouselAutoplay(${options})`}
  x-init="start()"
  class="w-full relative overflow-hidden"
>
  <!-- Slides (pointer-events-none so arrows capture clicks) -->
  <div class="relative w-full overflow-hidden h-[600px] pointer-events-none">
    <template x-for="(slide, index) in slides" :key="index">
      <div
        x-show="current === index"
        x-transition:enter="transition ease-out duration-1000"
        x-transition:enter-start="translate-x-full"
        x-transition:enter-end="translate-x-0"
        x-transition:leave="transition ease-in duration-1000"
        x-transition:leave-start="translate-x-0"
        x-transition:leave-end="-translate-x-full"
        class="absolute inset-0"
      >
        <img :src="slide.src" :alt="slide.title" class="w-full h-full object-cover" loading="lazy" />
        <div class="absolute inset-x-0 bottom-0 px-6 md:px-16 pb-8 pt-12 bg-black/5">
          <h2 x-text="slide.title" class="text-4xl font-bold mb-2 text-white drop-shadow-lg"></h2>
          <p x-text="slide.text" class="max-w-xl mb-4 text-white drop-shadow-lg"></p>
          <a :href="slide.link" class="btn btn-primary btn-sm sm:btn-md w-fit">Learn More</a>
        </div>
        <template x-if="showProgress && current === index">
          <div
            class="absolute bottom-0 left-0 h-1 bg-primary"
            :style="`width: ${progress}%; transition: width ${interval}ms linear;`"
          ></div>
        </template>
      </div>
    </template>
  </div>

  <!-- Navigation Arrows -->
  <div class="absolute inset-x-0 top-1/2 z-30 flex justify-between items-center px-6 -translate-y-1/2 pointer-events-auto">
    <button @click="prev(); restart();" type="button" class="btn btn-circle btn-md sm:btn-lg text-xl">❮</button>
    <button @click="next(); restart();" type="button" class="btn btn-circle btn-md sm:btn-lg text-xl">❯</button>
  </div>

  <!-- Thumbnails -->
  <div class="mt-4 flex justify-center gap-2 sm:gap-4 flex-wrap pointer-events-auto">
    <template x-for="(slide, index) in slides" :key="index">
      <button
        @click="goTo(index); restart();"
        type="button"
        class="w-16 h-12 sm:w-24 sm:h-16 border-2 rounded-md overflow-hidden transition-all duration-300"
        :class="current === index ? 'border-primary opacity-100' : 'border-base-300 opacity-50 hover:opacity-80'"
      >
        <img :src="slide.src" :alt="slide.title" class="w-full h-full object-cover" loading="lazy" />
      </button>
    </template>
  </div>
</div>

<script is:inline>
  // Global carousel factory
  window.carouselAutoplay = function({ autoplay, interval, showProgress, slides }) {
    return {
      slides,
      current: 0,
      autoplay,
      interval,
      showProgress,
      timer: null,
      progress: 0,
      start() {
        this.current = 0;
        if (this.autoplay) this.restart();
      },
      restart() {
        clearInterval(this.timer);
        this.animateProgress();
        this.timer = setInterval(() => {
          this.next();
          this.animateProgress();
        }, this.interval);
      },
      animateProgress() {
        this.progress = 0;
        const step = 100 / (this.interval / 100);
        const animation = setInterval(() => {
          this.progress += step;
          if (this.progress >= 100) clearInterval(animation);
        }, 100);
      },
      next() {
        this.current = (this.current + 1) % this.slides.length;
      },
      prev() {
        this.current = (this.current - 1 + this.slides.length) % this.slides.length;
      },
      goTo(index) {
        this.current = index;
      }
    };
  };
</script>
