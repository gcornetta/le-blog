---
const { youtubeId = '', iframeId = '', thumbnail = '' } = Astro.props;
---

<div
  x-data="youTubePlayer"
  x-init="initPlayer"
  @mouseenter="showToolbar = true; if (playing) autoHide();"
  @mousemove="showToolbar = true; if (playing) autoHide();"
  class="relative aspect-video rounded-lg shadow-lg overflow-hidden group"
>
  {youtubeId ? (
    <iframe
      id={iframeId || 'yt-iframe'}
      class="absolute top-0 left-0 w-full h-full pointer-events-none"
      src={`https://www.youtube.com/embed/${youtubeId}?enablejsapi=1&modestbranding=1&rel=0&controls=0&fs=1&showinfo=0`}
      allow="autoplay; encrypted-media"
      allowfullscreen
      title="YouTube video player"
    ></iframe>
  ) : (
    <div class="absolute inset-0 bg-gray-800 text-white flex items-center justify-center">
      <p class="text-xl">Loading video...</p>
    </div>
  )}

  <!-- Loading Spinner -->
  <div x-show="!player" class="absolute inset-0 flex items-center justify-center bg-black/50 z-40">
    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
  </div>

  <template x-if="!playing && player">
    <div class="absolute inset-0 bg-black/60 z-10">
      {thumbnail && (
        <img src={thumbnail} alt="Video thumbnail" class="absolute w-full h-full object-cover z-0 pointer-events-none" />
      )}
      <div class="absolute inset-0 flex items-center justify-center">
        <div
          class="relative group/play w-20 h-20 flex items-center justify-center cursor-pointer"
          @click="togglePlay"
        >
          <span class="absolute w-full h-full rounded-full border-2 border-white opacity-60 group-hover/play:animate-ping pointer-events-none"></span>
          <span class="absolute w-full h-full rounded-full border-2 border-white opacity-30 group-hover/play:animate-ping delay-150 pointer-events-none"></span>
          <div class="bg-white/90 rounded-full w-16 h-16 flex items-center justify-center shadow-lg hover:scale-110 transition-transform z-20">
            <svg class="w-6 h-6 text-gray-900 ml-[2px]" fill="currentColor" viewBox="0 0 16 16">
              <path d="M6.79 5.093a.5.5 0 0 1 .765-.424l4.5 2.907a.5.5 0 0 1 0 .848l-4.5 2.907a.5.5 0 0 1-.765-.424V5.093z"/>
            </svg>
          </div>
        </div>
      </div>
    </div>
  </template>

  <div
    x-show="showToolbar && player"
    x-transition.opacity
    class="absolute bottom-0 left-0 right-0 bg-black/70 text-white px-4 py-3 flex items-center gap-4 text-sm z-30"
  >
    <button @click="togglePlay" class="hover:scale-110 transition">
      <svg x-show="!playing" class="w-6 h-6" fill="currentColor" viewBox="0 0 16 16">
        <path d="M6.79 5.093a.5.5 0 0 1 .765-.424l4.5 2.907a.5.5 0 0 1 0 .848l-4.5 2.907a.5.5 0 0 1-.765-.424V5.093z"/>
      </svg>
      <svg x-show="playing" class="w-6 h-6" fill="currentColor" viewBox="0 0 16 16">
        <path d="M5.5 3.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0v-8a.5.5 0 0 1 .5-.5zm5 0a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0v-8a.5.5 0 0 1 .5-.5z"/>
      </svg>
    </button>

    <div class="flex items-center gap-1">
      <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6l4 2m6-2a10 10 0 1 1-20 0 10 10 0 0 1 20 0z" />
      </svg>
      <span x-text="formatTime(currentTime)"></span>
    </div>

    <div class="relative flex-1 h-2 bg-gray-700 rounded cursor-pointer" @click="seek">
      <div class="absolute top-0 left-0 h-2 bg-gray-500 rounded" :style="`width: ${buffer}%`"></div>
      <div class="absolute top-0 left-0 h-2 bg-primary rounded" :style="`width: ${progress}%`"></div>
    </div>

    <span x-text="formatTime(duration)"></span>

    <button @click="toggleMute" class="flex items-center">
      <svg x-show="!muted" class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
        <path d="M5 9v6h4l5 5V4l-5 5H5z"/>
      </svg>
      <svg x-show="muted" class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
        <path d="M5 9v6h4l5 5V4l-5 5H5zm11.5 3c0-1.77-1-3.29-2.5-4.03v8.05c1.5-.73 2.5-2.25 2.5-4.02z"/>
      </svg>
    </button>

    <div class="relative w-24 h-2 bg-gray-400 rounded cursor-pointer" @click="changeVolume">
      <div class="absolute top-0 left-0 h-2 bg-primary rounded" :style="`width: ${volume}%`"></div>
    </div>

    <button @click="toggleFullscreen">
      <svg class="w-6 h-6" viewBox="0 0 24 24" fill="white" xmlns="http://www.w3.org/2000/svg">
        <path d="M3 3h6v2H5v4H3V3zm18 0v6h-2V5h-4V3h6zM3 21v-6h2v4h4v2H3zm18-6v6h-6v-2h4v-4h2z"/>
      </svg>
    </button>
  </div>
</div>

<script is:inline>
document.addEventListener('alpine:init', () => {
  Alpine.data('youTubePlayer', () => ({
    player: null,
    playing: false,
    muted: false,
    volume: 100,
    progress: 0,
    buffer: 0,
    currentTime: 0,
    duration: 0,
    showToolbar: true,
    timeout: null,

    initPlayer() {
      const iframeId = this.$el.querySelector('iframe').id;
      const callbackName = `onYouTubeIframeAPIReady_${iframeId}`;
      
      window[callbackName] = () => {
        this.player = new YT.Player(iframeId, {
          events: {
            onReady: () => {
              this.muted = this.player.isMuted();
              this.volume = this.player.getVolume();
              this.duration = this.player.getDuration();
              this.updateToolbar();
              this.track();
            },
            onStateChange: (e) => {
              this.playing = e.data === YT.PlayerState.PLAYING;
              if (e.data === YT.PlayerState.ENDED) {
                this.playing = false;
                this.currentTime = this.duration;
              }
              this.updateToolbar();
              if (this.playing) this.autoHide();
            }
          }
        });
      };

      if (!window.YT) {
        window.onYouTubeIframeAPIReady = function() {
          Object.keys(window)
            .filter(key => key.startsWith('onYouTubeIframeAPIReady_'))
            .forEach(key => window[key]());
        };
        
        const tag = document.createElement('script');
        tag.src = 'https://www.youtube.com/iframe_api';
        document.body.appendChild(tag);
      } else if (window.YT.loaded) {
        window[callbackName]();
      }
    },

    togglePlay() {
      if (!this.player) return;
      this.playing ? this.player.pauseVideo() : this.player.playVideo();
    },

    toggleMute() {
      if (!this.player) return;
      this.muted = !this.muted;
      this.player[this.muted ? 'mute' : 'unMute']();
    },

    seek(e) {
      if (!this.player) return;
      const rect = e.target.getBoundingClientRect();
      const percent = (e.clientX - rect.left) / rect.width;
      const seekTime = this.duration * percent;
      this.player.seekTo(seekTime, true);
      this.currentTime = seekTime;
    },

    changeVolume(e) {
      if (!this.player) return;
      const rect = e.target.getBoundingClientRect();
      const percent = Math.min(1, Math.max(0, (e.clientX - rect.left) / rect.width));
      this.volume = Math.round(percent * 100);
      this.player.setVolume(this.volume);
      this.muted = this.volume === 0;
    },

    toggleFullscreen() {
      if (!this.player) return;
      const iframe = this.player.getIframe();
      if (document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        iframe.requestFullscreen();
      }
    },

    formatTime(seconds) {
      if (isNaN(seconds)) return '0:00';
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = Math.floor(seconds % 60);
      return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
    },

    track() {
      if (!this.player) return;
      requestAnimationFrame(() => {
        if (this.player.getDuration) {
          this.currentTime = this.player.getCurrentTime();
          this.duration = this.player.getDuration();
          this.progress = (this.currentTime / this.duration) * 100;
          this.buffer = this.player.getVideoLoadedFraction() * 100;
        }
        this.track();
      });
    },

    updateToolbar() {
      this.showToolbar = true;
    },

    autoHide() {
      clearTimeout(this.timeout);
      this.timeout = setTimeout(() => {
        if (this.playing) this.showToolbar = false;
      }, 2000);
    }
  }));
});
</script>