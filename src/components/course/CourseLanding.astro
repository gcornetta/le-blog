---
// File: src/components/course/CourseLanding.astro
// Props: { course }
import { Image } from "astro:assets";
import { db, CourseVideos, Videos, eq, and } from 'astro:db';

// Eager-import all course images as ImageMetadata (same pattern as FeaturedCourses.astro)
const courseImageModules = import.meta.glob(
  "../../assets/images/{courses,authors}/**/*.{png,jpg,jpeg,webp,avif}",
  { eager: true }
);

// Build lookup maps keyed by canonical path and by filename
function normalizeKey(p: string) {
  let s = p.replace(/\\/g, "/");
  s = s.replace(/^.*\/assets\/images\//i, "/images/");
  s = s.replace(/^images\//i, "/images/");
  if (!s.startsWith("/images/")) s = s.startsWith("/") ? s : `/images/${s}`;
  return s.toLowerCase();
}

const imageByPath = new Map<string, any>();
const imageByFile = new Map<string, any>();

for (const [key, mod] of Object.entries(courseImageModules)) {
  const meta = (mod as any).default ?? mod; // ImageMetadata
  const canonical = normalizeKey(key.replace(/^.*\/assets\/images\//i, "/images/"));
  imageByPath.set(canonical, meta);

  const file = canonical.split("/").pop();
  if (file) imageByFile.set(file.toLowerCase(), meta);
}

// Resolve DB string to ImageMetadata (or null). Same as FeaturedCourses.astro but used for heroImage.
function resolveCourseImage(dbPath?: string | unknown) {
  if (!dbPath) return null;

  // If already an ImageMetadata object (optional support)
  if (typeof dbPath === "object" && dbPath && (dbPath as any).src) {
    return dbPath as any;
  }

  if (typeof dbPath !== "string") return null;

  const candidates = new Set<string>();
  candidates.add(normalizeKey(dbPath));

  if (/^\/assets\/images\//i.test(dbPath)) {
    candidates.add(normalizeKey(dbPath.replace(/^\/assets/i, "")));
  }

  const fileOnly = dbPath.split("/").pop();
  if (fileOnly) {
    const meta = imageByFile.get(fileOnly.toLowerCase());
    if (meta) return meta;
  }

  for (const c of candidates) {
    const meta = imageByPath.get(c);
    if (meta) return meta;
  }
  return null;
}

const { course } = Astro.props;
const fmt = new Intl.NumberFormat("en-US");

const heroMeta = resolveCourseImage(course.heroImage);
const avatarMeta = resolveCourseImage(course.avatar);


const courseId =
  typeof course?.id === 'number' && Number.isFinite(course.id) ? course.id : null;

let trailer: any = null;
let trailerSrc: string | null = null;

try {
  if (courseId !== null) {
    const rows = await db
      .select()
      .from(CourseVideos)
      .where(and(eq(CourseVideos.course_id, courseId), eq(CourseVideos.role, 'trailer')))
      .orderBy(CourseVideos.order_index)
      .limit(1);

    const trailerRow = rows?.[0];

    if (trailerRow?.video_id != null) {
      const vRows = await db.select().from(Videos).where(eq(Videos.id, trailerRow.video_id)).limit(1);
      const v = vRows?.[0];
      if (v) {
        trailer = { ...v, startAt: trailerRow.start_at ?? 0 };
        trailerSrc =
          `https://www.youtube-nocookie.com/embed/${v.youtubeId}` +
          `?rel=0&modestbranding=1&playsinline=1` +
          (trailer.startAt ? `&start=${trailer.startAt}` : '');
      }
    }
  } else if (import.meta.env.DEV) {
    console.warn("CourseLanding — missing course.id for", course?.slug ?? course?.title);

  }
} catch (err) {
  console.error("CourseLanding trailer query failed:", err);
}
---

<section class="relative">
  <!-- HERO -->
  <div class="hero bg-base-200/60">
    <div class="hero-content max-w-6xl mx-auto px-4 py-12 lg:py-16">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
        <div>
          <div class="flex items-center gap-2 mb-3">
            {course.badge && <span class="badge badge-primary badge-lg">{course.badge}</span>}
            {course.level && <span class="badge badge-ghost">{course.level}</span>}
          </div>
          <h1 class="text-3xl sm:text-4xl font-extrabold leading-tight">
            {course.title}
          </h1>
          {course.subtitle && (
            <p class="mt-3 text-base-content/80 text-lg">{course.subtitle}</p>
          )}

          <!-- Instructor -->
          {(course.instructor || course.avatar) && (
            <div class="mt-4 flex items-center gap-3">
              <div class="avatar">
                <div class="w-12 h-12 rounded-full ring ring-base-300 ring-offset-2 ring-offset-base-100 overflow-hidden">
                  {avatarMeta ? (
                    <Image
                      src={avatarMeta}
                      alt={course.instructor ? `${course.instructor} - instructor` : "Instructor avatar"}
                      width={96}
                      height={96}
                      class="w-full h-full object-cover"
                      loading="eager"
                    />
                  ) : course.avatar ? (
                    <img
                      src={typeof course.avatar === "string" ? course.avatar : ""}
                      alt={course.instructor ? `${course.instructor} - instructor` : "Instructor avatar"}
                      class="w-full h-full object-cover"
                      loading="eager"
                    />
                  ) : null}
                </div>
              </div>
              {course.instructor && (
                <div class="leading-tight">
                  <p class="font-semibold">{course.instructor}</p>
                  <p class="text-xs opacity-70">Instructor</p>
                </div>
              )}
            </div>
          )}

          <!-- Key stats row -->
          <ul class="mt-6 grid grid-cols-2 sm:grid-cols-3 gap-4 text-sm">
            <li class="card bg-base-100 shadow-sm">
              <div class="card-body p-4">
                <span class="font-semibold">{course.durationHours} hours</span>
                <span class="opacity-70">Estimated</span>
              </div>
            </li>
            <li class="card bg-base-100 shadow-sm">
              <div class="card-body p-4">
                <span class="font-semibold">{course.lessons} lessons</span>
                <span class="opacity-70">Structured path</span>
              </div>
            </li>
            <li class="card bg-base-100 shadow-sm">
              <div class="card-body p-4">
                <span class="font-semibold">{course.projects} projects</span>
                <span class="opacity-70">Hands-on</span>
              </div>
            </li>
          </ul>

          <!-- Social proof (rating / students) -->
          <div class="flex items-center gap-2 ml-1 text-sm opacity-80">
            {course.rating && (
              <>
                <span class="opacity-70">Course ratings:</span>
                <div class="rating rating-sm">
                  <input type="radio" class="mask mask-star-2 bg-warning" checked />
                  <input type="radio" class="mask mask-star-2 bg-warning" />
                  <input type="radio" class="mask mask-star-2 bg-warning" />
                  <input type="radio" class="mask mask-star-2 bg-warning" />
                  <input type="radio" class="mask mask-star-2 bg-warning" />
                </div>
                <span>{course.rating.toFixed(1)}</span>
              </>
            )}
            {course.students && <span>· {fmt.format(course.students)} learners</span>}
          </div>

          <!-- Primary CTA group -->
          <div class="mt-8 flex flex-wrap items-center gap-3">
            <a href={course.ctaPrimaryHref} class="btn btn-primary btn-lg">
              {course.ctaPrimaryLabel ?? "Start"}
            </a>
            {course.ctaSecondaryHref && (
              <a href={course.ctaSecondaryHref} class="btn btn-outline">
                {course.ctaSecondaryLabel ?? "View syllabus"}
              </a>
            )}
          </div>
        </div>
          <!-- Visual / Cover -->
          <div class="order-first lg:order-none">
            <div class="rounded-2xl overflow-hidden shadow-xl bg-base-100 aspect-video grid place-items-center">
              {heroMeta ? (
                <Image
                  src={heroMeta}
                  alt={course.title}
                  width={1280}
                  height={720}
                  class="w-full h-full object-cover"
                  loading="eager"
                />
              ) : course.heroImage ? (
                <img
                  src={typeof course.heroImage === "string" ? course.heroImage : ""}
                  alt={course.title}
                  class="w-full h-full object-cover"
                  loading="eager"
                />
              ) : (
                <div class="p-8 text-center">
                  <div class="text-5xl">🧩</div>
                  <p class="mt-3 opacity-70">Course cover</p>
                </div>
              )}
            </div>
          </div>
      </div>
    </div>
  </div>

<!-- TRAILER + WHAT YOU’LL LEARN -->
<div class="max-w-6xl mx-auto px-4 py-12" id="trailer">
  {trailer ? (
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
      <!-- Left: Trailer -->
      <div>
        <div class="card bg-base-100 shadow-xl overflow-hidden">
          <div class="aspect-video">
            <iframe
              src={trailerSrc!}
              title={trailer.title ?? "Course trailer"}
              class="w-full h-full"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowfullscreen
              loading="lazy"
            ></iframe>
          </div>
          <div class="card-body p-4">
            <div class="flex items-center gap-2">
              <span class="badge badge-primary">Trailer</span>
              {trailer.duration && <span class="badge badge-ghost">{trailer.duration}</span>}
            </div>
            <h3 class="mt-2 font-semibold">{trailer.title}</h3>
            {trailer.description && <p class="text-sm opacity-70">{trailer.description}</p>}
          </div>
        </div>
      </div>

      <!-- Right: What you’ll learn -->
      <div id="learn">
        <h2 class="text-2xl font-bold">What you’ll learn</h2>
        <ul class="mt-5 grid gap-3">
          {(course.outcomes ?? []).map((text: string) => (
            <li class="flex items-start gap-3 p-4 rounded-xl bg-base-200">
              <span class="text-xl">✅</span>
              <span>{text}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  ) : (
    <>
      {/* Fallback: no trailer → show the classic Learn block full width */}
      <div id="learn">
        <h2 class="text-2xl font-bold">What you’ll learn</h2>
        <ul class="mt-5 grid sm:grid-cols-2 gap-3">
          {(course.outcomes ?? []).map((text: string) => (
            <li class="flex items-start gap-3 p-4 rounded-xl bg-base-200">
              <span class="text-xl">✅</span>
              <span>{text}</span>
            </li>
          ))}
        </ul>
      </div>
    </>
  )}
</div>

<!-- SYLLABUS (bounded max width, accordion fills full space, numbered badges, expand/collapse all) -->
<div class="max-w-6xl mx-auto px-4 pb-6" x-data="{ expandAll: false }" x-init="$nextTick(() => { $refs.syllabus.querySelectorAll('input[type=checkbox]').forEach(i => i.checked = false) })">
  <div class="flex items-center justify-between">
    <h2 class="text-2xl font-bold">Syllabus</h2>
    <button
      type="button"
      class="btn btn-sm"
      @click="
        expandAll = !expandAll;
        $refs.syllabus.querySelectorAll('input[type=checkbox]').forEach(i => i.checked = expandAll)
      "
      x-text="expandAll ? 'Collapse all' : 'Expand all'">
    </button>
  </div>

  <p class="mt-1 opacity-70 text-sm">
    {course.lessons} lessons · {course.projects} projects · {course.quizzes} quizzes
  </p>

  <div class="join join-vertical bg-base-100 mt-4 w-full" x-ref="syllabus">
    {(course.syllabus ?? []).map((m: any, i: number) => (
      <div class="collapse collapse-arrow join-item border border-base-300 w-full">
        <input type="checkbox" />
        <div class="collapse-title font-semibold flex items-center gap-3">
          <!-- Circular number badge -->
          <span class="badge badge-primary rounded-full w-8 h-8 p-0 grid place-items-center text-primary-content">
            {String(m.n ?? i + 1)}
          </span>
          <span>{m.title}</span>
        </div>
        <div class="collapse-content text-sm space-y-2">
          <p class="opacity-70">Module type: {m.type}</p>
          {m.summary && <p>{m.summary}</p>}
          {Array.isArray(m.items) && m.items.length > 0 && (
            <ul class="list-disc ml-5 space-y-1">
              {m.items.map((it: string) => <li>{it}</li>)}
            </ul>
          )}
        </div>
      </div>
    ))}
  </div>

  <!-- REQUIREMENTS (optional) -->
  {course.requirements && course.requirements.length > 0 && (
    <div class="max-w-6xl mx-auto px-4 pb-2">
      <h3 class="text-xl font-semibold mb-2">Requirements</h3>
      <ul class="list-disc ml-5 space-y-1">
        {course.requirements.map((r: string) => <li>{r}</li>)}
      </ul>
    </div>
  )}

  <!-- Secondary CTA (the “second Start” like Codecademy) -->
  <div class="max-w-6xl mx-auto px-4 py-10">
    <div class="card bg-primary text-primary-content">
      <div class="card-body md:flex md:items-center md:justify-between gap-6">
        <div class="text-center">
          <h3 class="text-2xl font-bold">Ready to start?</h3>
          <p class="opacity-90">Jump in and complete your first module today.</p>
        </div>
        <a href={course.ctaPrimaryHref} class="btn btn-lg">
          {course.ctaPrimaryLabel ?? "Start"}
        </a>
      </div>
    </div>
  </div>
</section>
