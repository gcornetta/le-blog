---
import { db, Courses } from 'astro:db';

// Server-side initial render
const initialCourses = await db.select().from(Courses).limit(20);
---

<html>
  <head>
    <meta charset="utf-8" />
    <title>Course Catalog</title>
  </head>
  <body>
    <h1>Course Catalog</h1>

    <input
      id="search"
      type="text"
      placeholder="Search courses..."
      class="border px-2 py-1 mb-4"
    />

    <ul id="results">
      {initialCourses.map((c) => (
        <li>{c.title} - {c.description ?? ''}</li>
      ))}
    </ul>

    <script is:inline>
      // Small debounce to avoid spamming the API while typing
      function debounce(fn, ms=200) {
        let t;
        return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); };
      }

      async function fetchCourses(q) {
        const res = await fetch(`/api/v1/search/search-courses?q=${encodeURIComponent(q)}`, {
          cache: 'no-store'
        });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      }

      function renderList(courses) {
        const ul = document.getElementById('results');
        if (!ul) return;
        ul.innerHTML = '';
        for (const c of courses) {
          const li = document.createElement('li');
          li.textContent = `${c.title} - ${c.description ?? ''}`;
          ul.appendChild(li);
        }
      }

      const doSearch = debounce(async (q) => {
        try {
          const courses = await fetchCourses(q);
          renderList(courses);
        } catch (e) {
          console.error('Search failed:', e);
        }
      }, 250);

      // Wire up after DOM is ready
      document.addEventListener('DOMContentLoaded', () => {
        const inp = document.getElementById('search');
        inp?.addEventListener('input', (e) => doSearch(e.target.value));
        // Initial refresh (SSR already rendered, but sync with API)
        doSearch('');
      });
    </script>
  </body>
</html>
